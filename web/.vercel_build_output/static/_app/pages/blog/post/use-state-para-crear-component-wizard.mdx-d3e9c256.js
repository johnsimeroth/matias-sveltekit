import{S as a,i as n,s,B as t,j as e,m as p,o,p as c,q as l,x as u,u as i,v as r,N as k,k as d,e as m,t as g,n as v,c as f,a as h,g as b,d as P,b as x,f as q,G as y}from"../../../chunks/vendor-64eebebd.js";import{P as z}from"../../../chunks/PostLayout-1d1b8b8e.js";import{E}from"../../../chunks/EggheadLesson-5d77fb7e.js";import{Q as w}from"../../../chunks/Quote-982ae035.js";function j(a){let n,s,t,e,p,o,c,l,u,i,r;return{c(){n=m("h3"),s=g("TLDR;"),t=d(),e=m("p"),p=g("Puedes ver este video en "),o=m("a"),c=g("egghead.io"),l=g(".\nEste video es parte de una "),u=m("a"),i=g("colección"),r=g(" en donde se muestra progresivamente como crear un componente utilizando diferentes hooks y patrones de diseño"),this.h()},l(a){n=f(a,"H3",{id:!0});var k=h(n);s=b(k,"TLDR;"),k.forEach(P),t=v(a),e=f(a,"P",{});var d=h(e);p=b(d,"Puedes ver este video en "),o=f(d,"A",{href:!0,rel:!0});var m=h(o);c=b(m,"egghead.io"),m.forEach(P),l=b(d,".\nEste video es parte de una "),u=f(d,"A",{href:!0,rel:!0});var g=h(u);i=b(g,"colección"),g.forEach(P),r=b(d," en donde se muestra progresivamente como crear un componente utilizando diferentes hooks y patrones de diseño"),d.forEach(P),this.h()},h(){x(n,"id","tldr"),x(o,"href","https://egghead.io/lessons/react-crear-un-componente-wizard-usando-usestate-react-hooks?pl=hooks-3d62⁡=4cexzz"),x(o,"rel","nofollow"),x(u,"href","https://egghead.io/playlists/hooks-3d62⁡=4cexzz"),x(u,"rel","nofollow")},m(a,k){q(a,n,k),y(n,s),q(a,t,k),q(a,e,k),y(e,p),y(e,o),y(o,c),y(e,l),y(e,u),y(u,i),y(e,r)},d(a){a&&P(n),a&&P(t),a&&P(e)}}}function $(a){let n,s,t,c,l,k,z,$,I,_,C,S,N,A,R,D,O,T,L,W,B,H,U,M,G,Q,Z,F,J,K,V,X,Y,aa,na,sa,ta,ea,pa,oa,ca,la,ua,ia,ra,ka,da,ma,ga,va,fa,ha,ba,Pa,xa,qa,ya,za,Ea,wa,ja,$a,Ia,_a,Ca,Sa,Na,Aa,Ra,Da,Oa,Ta,La,Wa,Ba,Ha,Ua,Ma,Ga,Qa,Za,Fa,Ja,Ka,Va,Xa,Ya,an,nn,sn,tn,en,pn,on,cn,ln,un,rn,kn,dn,mn,gn,vn,fn,hn,bn,Pn,xn,qn,yn,zn,En,wn,jn,$n,In,_n,Cn,Sn;return n=new w({props:{$$slots:{default:[j]},$$scope:{ctx:a}}}),t=new E({props:{lessonId:"react-crear-un-componente-wizard-usando-usestate-react-hooks"}}),{c(){e(n.$$.fragment),s=d(),e(t.$$.fragment),c=d(),l=m("p"),k=g("Un "),z=m("strong"),$=g("Wizard"),I=g(" o "),_=m("strong"),C=g("multi-step"),S=g(" es un componente que puede contenir multiples “páginas” pero que sólo renderiza una de ellas y permite navegar hacia delante o atrás entre las páginas restantes. Este tipo de componentes son usualmente utilizados para renderizar formularios largos dividiendolos en diferentes “pasos”."),N=d(),A=m("p"),R=g("Este tipo de componentes requieren el manejo de un estado interno para poder decidir que “página” se debe renderizar y como los botones del componente deben actuar ante el evento click. La forma que React ofrece para manejar estados internos es utilizando el hook "),D=m("code"),O=g("React.useState"),T=d(),L=m("p"),W=g("La forma más sencilla de este componente utiliza un estado sencillo que solo indica el indice de la página “actual”, es decir, la que se mostrará en pantalla."),B=d(),H=m("p"),U=g("En este ejemplo podemos ver el uso de useState, y como utilizar la forma funcional de la función actualizadora para acceder al estado actual y modificarlo."),M=d(),G=m("p"),Q=g("Para comenzar, crearemos la base de nuestro componente creando un contenedor que mantendrá otros dos contenedores, uno para el contenido que se renderizará y otro para los botones necesarios para la navegación."),Z=d(),F=m("pre"),J=d(),K=m("p"),V=g("Con esto en su lugar ya podemos definir los componentes que irán dentro de nuestro wizard y definir el aspecto que tendrán cuando sean renderizados para eso crearemos en este caso tres componentes simples que llamaremos page que simplemente contienen un título indicando la página a la que corresponden y agregamos esto dentro de nuestra aplicación."),X=d(),Y=m("pre"),aa=d(),na=m("p"),sa=g("Nuestro objetivo ahora es mostrar una página a la vez, por lo que necesitamos manipular los componentes que el wizard recibe. Para esto, utilizaremos la API React.Children que permite manipular el objeto children, en este caso, convirtiéndolo a un arreglo de elementos.\nTambién usaremos una variable auxiliar "),ta=m("code"),ea=g("currentPage"),pa=g(" que mantendrá la página que se renderizará y utilizaremos un índice para indicar la selección. En este caso utilizamos el primer indice lo que renderizará sólo la prima página que hemos creado."),oa=d(),ca=m("pre"),la=d(),ua=m("p"),ia=g("Ahora es cuando entra en juego el hook "),ra=m("code"),ka=g("useState"),da=g("."),ma=d(),ga=m("p"),va=g("Es necesario que el componente seleccionado en currentPage sea variable, se modifique con el tiempo, y cambie cuando se hace click en alguno de los botones. Esto es que cambie el estado de nuestro componente."),fa=d(),ha=m("p"),ba=g("Este estado lo podemos manejar con el hook "),Pa=m("code"),xa=g("useState"),qa=g(" que retorna el arreglo con dos elementos, un valor que llamamos "),ya=m("code"),za=g("activePageIndex"),Ea=g(" y una función que sirve para definir el valor del estado que llamaremos "),wa=m("code"),ja=g("setActivePageIndex"),$a=g("."),Ia=d(),_a=m("pre"),Ca=d(),Sa=m("p"),Na=g("Además, useState puede recibir un valor inicial que será en este caso el primer índice. Con esto, ya podemos usar el valor de "),Aa=m("code"),Ra=g("activePageIndex"),Da=g(" para definir qué se renderiza en cada momento. Recuerda que cada llamada al componente tiene su propio valor de "),Oa=m("code"),Ta=g("activePageIndex"),La=g("."),Wa=d(),Ba=m("p"),Ha=g("Utilizaremos el valor de "),Ua=m("code"),Ma=g("activePageIndex"),Ga=g(" para definir si se muestra o no cada botón. Para eso simplemente escribimos una condicional ternaría indicando que se renderice el botón con cierta condición o se renderice null."),Qa=d(),Za=m("pre"),Fa=d(),Ja=m("p"),Ka=g("En el caso del botón atrás, se renderizará sólo si "),Va=m("code"),Xa=g("activePageIndex"),Ya=g(", que es el índice, sea mayor que "),an=m("code"),nn=g("0"),sn=g(", y en el caso del botón Siguiente, se renderizará sólo si "),tn=m("code"),en=g("activePageIndex"),pn=g(" es menor que el total de ítems dentro de las páginas. Aún los botones no hace específicamente nada. Es necesario que el estado pueda cambiar."),on=d(),cn=m("p"),ln=g("Para eso, definiremos dos funciones, una para cuando el botón atrás es presionado y otra para el botón siguiente. Para el botón atrás, simplemente disminuimos el valor del índice. Para eso, utilizamos la forma funcional de la función de actualización, la función "),un=m("code"),rn=g("setActivePageIndex"),kn=g("."),dn=d(),mn=m("p"),gn=g("Este método puede recibir una función que recibe como parámetro el estado actual y modifica el estado en base al valor retornado. En este caso, disminuye el índice en -1. De forma similar al presionar el botón Siguiente, el índice se incrementará en 1."),vn=d(),fn=m("pre"),hn=d(),bn=m("p"),Pn=g("Agregamos estos manejadores de eventos a cada botón y con esto ya tenemos una versión simplificada de un componente que permite navegar entre los elementos renderizados utilizando "),xn=m("code"),qn=g("useState"),yn=g(" para manejar el estado."),zn=d(),En=m("p"),wn=m("code"),jn=g("useState"),$n=g(" permite manejar el estado de un componente definido como una función. "),In=m("code"),_n=g("useState"),Cn=g(" retorna un arreglo con dos elementos, el valor del estado y una función para modificar ese estado. Es posible pasar una función como argumento a la función modificadora, lo que permite acceder al estado actual y retornar el nuevo estado"),this.h()},l(a){p(n.$$.fragment,a),s=v(a),p(t.$$.fragment,a),c=v(a),l=f(a,"P",{});var e=h(l);k=b(e,"Un "),z=f(e,"STRONG",{});var o=h(z);$=b(o,"Wizard"),o.forEach(P),I=b(e," o "),_=f(e,"STRONG",{});var u=h(_);C=b(u,"multi-step"),u.forEach(P),S=b(e," es un componente que puede contenir multiples “páginas” pero que sólo renderiza una de ellas y permite navegar hacia delante o atrás entre las páginas restantes. Este tipo de componentes son usualmente utilizados para renderizar formularios largos dividiendolos en diferentes “pasos”."),e.forEach(P),N=v(a),A=f(a,"P",{});var i=h(A);R=b(i,"Este tipo de componentes requieren el manejo de un estado interno para poder decidir que “página” se debe renderizar y como los botones del componente deben actuar ante el evento click. La forma que React ofrece para manejar estados internos es utilizando el hook "),D=f(i,"CODE",{});var r=h(D);O=b(r,"React.useState"),r.forEach(P),i.forEach(P),T=v(a),L=f(a,"P",{});var d=h(L);W=b(d,"La forma más sencilla de este componente utiliza un estado sencillo que solo indica el indice de la página “actual”, es decir, la que se mostrará en pantalla."),d.forEach(P),B=v(a),H=f(a,"P",{});var m=h(H);U=b(m,"En este ejemplo podemos ver el uso de useState, y como utilizar la forma funcional de la función actualizadora para acceder al estado actual y modificarlo."),m.forEach(P),M=v(a),G=f(a,"P",{});var g=h(G);Q=b(g,"Para comenzar, crearemos la base de nuestro componente creando un contenedor que mantendrá otros dos contenedores, uno para el contenido que se renderizará y otro para los botones necesarios para la navegación."),g.forEach(P),Z=v(a),F=f(a,"PRE",{class:!0}),h(F).forEach(P),J=v(a),K=f(a,"P",{});var x=h(K);V=b(x,"Con esto en su lugar ya podemos definir los componentes que irán dentro de nuestro wizard y definir el aspecto que tendrán cuando sean renderizados para eso crearemos en este caso tres componentes simples que llamaremos page que simplemente contienen un título indicando la página a la que corresponden y agregamos esto dentro de nuestra aplicación."),x.forEach(P),X=v(a),Y=f(a,"PRE",{class:!0}),h(Y).forEach(P),aa=v(a),na=f(a,"P",{});var q=h(na);sa=b(q,"Nuestro objetivo ahora es mostrar una página a la vez, por lo que necesitamos manipular los componentes que el wizard recibe. Para esto, utilizaremos la API React.Children que permite manipular el objeto children, en este caso, convirtiéndolo a un arreglo de elementos.\nTambién usaremos una variable auxiliar "),ta=f(q,"CODE",{});var y=h(ta);ea=b(y,"currentPage"),y.forEach(P),pa=b(q," que mantendrá la página que se renderizará y utilizaremos un índice para indicar la selección. En este caso utilizamos el primer indice lo que renderizará sólo la prima página que hemos creado."),q.forEach(P),oa=v(a),ca=f(a,"PRE",{class:!0}),h(ca).forEach(P),la=v(a),ua=f(a,"P",{});var E=h(ua);ia=b(E,"Ahora es cuando entra en juego el hook "),ra=f(E,"CODE",{});var w=h(ra);ka=b(w,"useState"),w.forEach(P),da=b(E,"."),E.forEach(P),ma=v(a),ga=f(a,"P",{});var j=h(ga);va=b(j,"Es necesario que el componente seleccionado en currentPage sea variable, se modifique con el tiempo, y cambie cuando se hace click en alguno de los botones. Esto es que cambie el estado de nuestro componente."),j.forEach(P),fa=v(a),ha=f(a,"P",{});var Sn=h(ha);ba=b(Sn,"Este estado lo podemos manejar con el hook "),Pa=f(Sn,"CODE",{});var Nn=h(Pa);xa=b(Nn,"useState"),Nn.forEach(P),qa=b(Sn," que retorna el arreglo con dos elementos, un valor que llamamos "),ya=f(Sn,"CODE",{});var An=h(ya);za=b(An,"activePageIndex"),An.forEach(P),Ea=b(Sn," y una función que sirve para definir el valor del estado que llamaremos "),wa=f(Sn,"CODE",{});var Rn=h(wa);ja=b(Rn,"setActivePageIndex"),Rn.forEach(P),$a=b(Sn,"."),Sn.forEach(P),Ia=v(a),_a=f(a,"PRE",{class:!0}),h(_a).forEach(P),Ca=v(a),Sa=f(a,"P",{});var Dn=h(Sa);Na=b(Dn,"Además, useState puede recibir un valor inicial que será en este caso el primer índice. Con esto, ya podemos usar el valor de "),Aa=f(Dn,"CODE",{});var On=h(Aa);Ra=b(On,"activePageIndex"),On.forEach(P),Da=b(Dn," para definir qué se renderiza en cada momento. Recuerda que cada llamada al componente tiene su propio valor de "),Oa=f(Dn,"CODE",{});var Tn=h(Oa);Ta=b(Tn,"activePageIndex"),Tn.forEach(P),La=b(Dn,"."),Dn.forEach(P),Wa=v(a),Ba=f(a,"P",{});var Ln=h(Ba);Ha=b(Ln,"Utilizaremos el valor de "),Ua=f(Ln,"CODE",{});var Wn=h(Ua);Ma=b(Wn,"activePageIndex"),Wn.forEach(P),Ga=b(Ln," para definir si se muestra o no cada botón. Para eso simplemente escribimos una condicional ternaría indicando que se renderice el botón con cierta condición o se renderice null."),Ln.forEach(P),Qa=v(a),Za=f(a,"PRE",{class:!0}),h(Za).forEach(P),Fa=v(a),Ja=f(a,"P",{});var Bn=h(Ja);Ka=b(Bn,"En el caso del botón atrás, se renderizará sólo si "),Va=f(Bn,"CODE",{});var Hn=h(Va);Xa=b(Hn,"activePageIndex"),Hn.forEach(P),Ya=b(Bn,", que es el índice, sea mayor que "),an=f(Bn,"CODE",{});var Un=h(an);nn=b(Un,"0"),Un.forEach(P),sn=b(Bn,", y en el caso del botón Siguiente, se renderizará sólo si "),tn=f(Bn,"CODE",{});var Mn=h(tn);en=b(Mn,"activePageIndex"),Mn.forEach(P),pn=b(Bn," es menor que el total de ítems dentro de las páginas. Aún los botones no hace específicamente nada. Es necesario que el estado pueda cambiar."),Bn.forEach(P),on=v(a),cn=f(a,"P",{});var Gn=h(cn);ln=b(Gn,"Para eso, definiremos dos funciones, una para cuando el botón atrás es presionado y otra para el botón siguiente. Para el botón atrás, simplemente disminuimos el valor del índice. Para eso, utilizamos la forma funcional de la función de actualización, la función "),un=f(Gn,"CODE",{});var Qn=h(un);rn=b(Qn,"setActivePageIndex"),Qn.forEach(P),kn=b(Gn,"."),Gn.forEach(P),dn=v(a),mn=f(a,"P",{});var Zn=h(mn);gn=b(Zn,"Este método puede recibir una función que recibe como parámetro el estado actual y modifica el estado en base al valor retornado. En este caso, disminuye el índice en -1. De forma similar al presionar el botón Siguiente, el índice se incrementará en 1."),Zn.forEach(P),vn=v(a),fn=f(a,"PRE",{class:!0}),h(fn).forEach(P),hn=v(a),bn=f(a,"P",{});var Fn=h(bn);Pn=b(Fn,"Agregamos estos manejadores de eventos a cada botón y con esto ya tenemos una versión simplificada de un componente que permite navegar entre los elementos renderizados utilizando "),xn=f(Fn,"CODE",{});var Jn=h(xn);qn=b(Jn,"useState"),Jn.forEach(P),yn=b(Fn," para manejar el estado."),Fn.forEach(P),zn=v(a),En=f(a,"P",{});var Kn=h(En);wn=f(Kn,"CODE",{});var Vn=h(wn);jn=b(Vn,"useState"),Vn.forEach(P),$n=b(Kn," permite manejar el estado de un componente definido como una función. "),In=f(Kn,"CODE",{});var Xn=h(In);_n=b(Xn,"useState"),Xn.forEach(P),Cn=b(Kn," retorna un arreglo con dos elementos, el valor del estado y una función para modificar ese estado. Es posible pasar una función como argumento a la función modificadora, lo que permite acceder al estado actual y retornar el nuevo estado"),Kn.forEach(P),this.h()},h(){x(F,"class","language-jsx"),x(Y,"class","language-jsx"),x(ca,"class","language-jsx"),x(_a,"class","language-jsx"),x(Za,"class","language-jsx"),x(fn,"class","language-jsx")},m(a,e){o(n,a,e),q(a,s,e),o(t,a,e),q(a,c,e),q(a,l,e),y(l,k),y(l,z),y(z,$),y(l,I),y(l,_),y(_,C),y(l,S),q(a,N,e),q(a,A,e),y(A,R),y(A,D),y(D,O),q(a,T,e),q(a,L,e),y(L,W),q(a,B,e),q(a,H,e),y(H,U),q(a,M,e),q(a,G,e),y(G,Q),q(a,Z,e),q(a,F,e),F.innerHTML='<code class="language-jsx"><span class="token keyword">const</span> <span class="token function-variable function">Wizard</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> children <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wizard<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wizard__content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wizard__buttons<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code>',q(a,J,e),q(a,K,e),y(K,V),q(a,X,e),q(a,Y,e),Y.innerHTML='<code class="language-jsx"><span class="token keyword">const</span> <span class="token function-variable function">Page1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">Pagina 1</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">\n  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">Page2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">Pagina 2</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">\n  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token function-variable function">Page3</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">Pagina 3</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">\n  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Wizard</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Page1</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Page2</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Page3</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Wizard</span></span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code>',q(a,aa,e),q(a,na,e),y(na,sa),y(na,ta),y(ta,ea),y(na,pa),q(a,oa,e),q(a,ca,e),ca.innerHTML='<code class="language-jsx"><span class="token keyword">const</span> <span class="token function-variable function">Wizard</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> children <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">const</span> pages <span class="token operator">=</span> React<span class="token punctuation">.</span>Children<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span>children<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> currentPage <span class="token operator">=</span> pages<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wizard<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wizard__content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>currentPage<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wizard__buttons<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code>',q(a,la,e),q(a,ua,e),y(ua,ia),y(ua,ra),y(ra,ka),y(ua,da),q(a,ma,e),q(a,ga,e),y(ga,va),q(a,fa,e),q(a,ha,e),y(ha,ba),y(ha,Pa),y(Pa,xa),y(ha,qa),y(ha,ya),y(ya,za),y(ha,Ea),y(ha,wa),y(wa,ja),y(ha,$a),q(a,Ia,e),q(a,_a,e),_a.innerHTML='<code class="language-jsx"><span class="token keyword">const</span> <span class="token function-variable function">Wizard</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> children <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>activePageIndex<span class="token punctuation">,</span> setActivePageIndex<span class="token punctuation">]</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> pages <span class="token operator">=</span> React<span class="token punctuation">.</span>Children<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span>children<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> currentPage <span class="token operator">=</span> pages<span class="token punctuation">[</span>activePageIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wizard<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wizard__content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>currentPage<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wizard__buttons<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code>',q(a,Ca,e),q(a,Sa,e),y(Sa,Na),y(Sa,Aa),y(Aa,Ra),y(Sa,Da),y(Sa,Oa),y(Oa,Ta),y(Sa,La),q(a,Wa,e),q(a,Ba,e),y(Ba,Ha),y(Ba,Ua),y(Ua,Ma),y(Ba,Ga),q(a,Qa,e),q(a,Za,e),Za.innerHTML='<code class="language-jsx"><span class="token keyword">const</span> <span class="token function-variable function">Wizard</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> children <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>activePageIndex<span class="token punctuation">,</span> setActivePageIndex<span class="token punctuation">]</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> pages <span class="token operator">=</span> React<span class="token punctuation">.</span>Children<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span>children<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> currentPage <span class="token operator">=</span> pages<span class="token punctuation">[</span>activePageIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">const</span> <span class="token function-variable function">ButtonPrev</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>\n    activePageIndex <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token punctuation">(</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wizard__buttons-left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n        Atras\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n    <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">ButtonNext</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>\n    activePageIndex <span class="token operator">&lt;</span> pages<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token punctuation">(</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wizard__buttons-right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n        Siguiente\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n    <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wizard<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wizard__content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>currentPage<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wizard__buttons<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ButtonPrev</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ButtonNext</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code>',q(a,Fa,e),q(a,Ja,e),y(Ja,Ka),y(Ja,Va),y(Va,Xa),y(Ja,Ya),y(Ja,an),y(an,nn),y(Ja,sn),y(Ja,tn),y(tn,en),y(Ja,pn),q(a,on,e),q(a,cn,e),y(cn,ln),y(cn,un),y(un,rn),y(cn,kn),q(a,dn,e),q(a,mn,e),y(mn,gn),q(a,vn,e),q(a,fn,e),fn.innerHTML='<code class="language-jsx"><span class="token keyword">const</span> <span class="token function-variable function">Wizard</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> children <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>activePageIndex<span class="token punctuation">,</span> setActivePageIndex<span class="token punctuation">]</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> pages <span class="token operator">=</span> React<span class="token punctuation">.</span>Children<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span>children<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> currentPage <span class="token operator">=</span> pages<span class="token punctuation">[</span>activePageIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">const</span> <span class="token function-variable function">goNextPage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>\n    <span class="token function">setActivePageIndex</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span> <span class="token operator">=></span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">const</span> <span class="token function-variable function">goPrevPage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>\n    <span class="token function">setActivePageIndex</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span> <span class="token operator">=></span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">const</span> <span class="token function-variable function">ButtonPrev</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>\n    activePageIndex <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token punctuation">(</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span>\n        <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span>\n        <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>goPrevPage<span class="token punctuation">&#125;</span></span>\n        <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wizard__buttons-left<span class="token punctuation">"</span></span>\n      <span class="token punctuation">></span></span><span class="token plain-text">\n        Atras\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n    <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">ButtonNext</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>\n    activePageIndex <span class="token operator">&lt;</span> pages<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token punctuation">(</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span>\n        <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span>\n        <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>goNextPage<span class="token punctuation">&#125;</span></span>\n        <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wizard__buttons-right<span class="token punctuation">"</span></span>\n      <span class="token punctuation">></span></span><span class="token plain-text">\n        Siguiente\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n    <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wizard<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wizard__content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>currentPage<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wizard__buttons<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ButtonPrev</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ButtonNext</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code>',q(a,hn,e),q(a,bn,e),y(bn,Pn),y(bn,xn),y(xn,qn),y(bn,yn),q(a,zn,e),q(a,En,e),y(En,wn),y(wn,jn),y(En,$n),y(En,In),y(In,_n),y(En,Cn),Sn=!0},p(a,s){const t={};2&s&&(t.$$scope={dirty:s,ctx:a}),n.$set(t)},i(a){Sn||(u(n.$$.fragment,a),u(t.$$.fragment,a),Sn=!0)},o(a){i(n.$$.fragment,a),i(t.$$.fragment,a),Sn=!1},d(a){r(n,a),a&&P(s),r(t,a),a&&P(c),a&&P(l),a&&P(N),a&&P(A),a&&P(T),a&&P(L),a&&P(B),a&&P(H),a&&P(M),a&&P(G),a&&P(Z),a&&P(F),a&&P(J),a&&P(K),a&&P(X),a&&P(Y),a&&P(aa),a&&P(na),a&&P(oa),a&&P(ca),a&&P(la),a&&P(ua),a&&P(ma),a&&P(ga),a&&P(fa),a&&P(ha),a&&P(Ia),a&&P(_a),a&&P(Ca),a&&P(Sa),a&&P(Wa),a&&P(Ba),a&&P(Qa),a&&P(Za),a&&P(Fa),a&&P(Ja),a&&P(on),a&&P(cn),a&&P(dn),a&&P(mn),a&&P(vn),a&&P(fn),a&&P(hn),a&&P(bn),a&&P(zn),a&&P(En)}}}function I(a){let n,s;const k=[a[0],_];let d={$$slots:{default:[$]},$$scope:{ctx:a}};for(let e=0;e<k.length;e+=1)d=t(d,k[e]);return n=new z({props:d}),{c(){e(n.$$.fragment)},l(a){p(n.$$.fragment,a)},m(a,t){o(n,a,t),s=!0},p(a,[s]){const t=1&s?c(k,[1&s&&l(a[0]),0&s&&l(_)]):{};2&s&&(t.$$scope={dirty:s,ctx:a}),n.$set(t)},i(a){s||(u(n.$$.fragment,a),s=!0)},o(a){i(n.$$.fragment,a),s=!1},d(a){r(n,a)}}}const _={date:"2021-07-11T03:13:59.000Z",banner:"https://res.cloudinary.com/matiasfha/image/upload/v1597115954/andreas-gucklhorn-Ilpf2eUPpUE-unsplash_n8npgz.jpg",keywords:["useState","hooks","hook","React","Wizard","componentes","lesson","tutorial"],tag:"Post",title:"Crear un componente Wizard utilizando useState React hook",description:"Como utilizar useState React hook para crear un sencillo componente Wizard o multi-step",bannerCredit:'<span>Photo by <a href="https://unsplash.com/@draufsicht?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Andreas Gücklhorn</a> on <a href="https://unsplash.com/collections/9718937/solar?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Unsplash</a></span>',favorite:!0,lang:"es"};function C(a,n,s){return a.$$set=a=>{s(0,n=t(t({},n),k(a)))},[n=k(n)]}class S extends a{constructor(a){super(),n(this,a,C,I,s,{})}}export{S as default,_ as metadata};
