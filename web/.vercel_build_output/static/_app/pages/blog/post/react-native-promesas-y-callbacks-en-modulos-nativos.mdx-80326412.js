import{S as a,i as n,s,B as e,j as o,m as t,o as p,p as c,q as l,x as i,u,v as r,N as k,e as d,t as m,k as v,c as f,a as h,g,d as b,n as y,b as E,f as w,G as P}from"../../../chunks/vendor-64eebebd.js";import{P as R}from"../../../chunks/PostLayout-1d1b8b8e.js";import{Q as C}from"../../../chunks/Quote-982ae035.js";function j(a){let n,s,e,o;return{c(){n=d("p"),s=m("Recomendado: "),e=d("a"),o=m("Comenzando con React Native"),this.h()},l(a){n=f(a,"P",{});var t=h(n);s=g(t,"Recomendado: "),e=f(t,"A",{href:!0,rel:!0});var p=h(e);o=g(p,"Comenzando con React Native"),p.forEach(b),t.forEach(b),this.h()},h(){E(e,"href","https://matiashernandez.dev/comenzando-con-react-native"),E(e,"rel","nofollow")},m(a,t){w(a,n,t),P(n,s),P(n,e),P(e,o)},d(a){a&&b(n)}}}function $(a){let n,s,e,o;return{c(){n=d("p"),s=m("Relacionado: "),e=d("a"),o=m("Agregar módulos nativos a una aplicación React Native"),this.h()},l(a){n=f(a,"P",{});var t=h(n);s=g(t,"Relacionado: "),e=f(t,"A",{href:!0,rel:!0});var p=h(e);o=g(p,"Agregar módulos nativos a una aplicación React Native"),p.forEach(b),t.forEach(b),this.h()},h(){E(e,"href","https://matiashernandez.dev/agregar-modulos-nativos-a-una-aplicacion-react-native"),E(e,"rel","nofollow")},m(a,t){w(a,n,t),P(n,s),P(n,e),P(e,o)},d(a){a&&b(n)}}}function z(a){let n,s,e,c,l,k,R,z,N,q,A,S,D,O,T,M,x,J,H,L,_,K,I,F,U,Y,W,B,Q,X,G,Z,V,aa,na,sa,ea,oa,ta,pa,ca,la,ia,ua,ra,ka,da,ma,va,fa,ha,ga,ba,ya,Ea,wa,Pa,Ra,Ca,ja,$a,za,Na,qa,Aa,Sa,Da,Oa,Ta,Ma,xa,Ja,Ha,La,_a,Ka,Ia,Fa,Ua,Ya,Wa,Ba,Qa,Xa,Ga,Za,Va,an,nn,sn,en,on,tn,pn,cn,ln,un,rn,kn,dn,mn,vn,fn,hn,gn,bn,yn,En,wn,Pn,Rn,Cn,jn,$n,zn,Nn,qn,An,Sn,Dn,On,Tn,Mn,xn,Jn,Hn,Ln,_n,Kn,In,Fn,Un,Yn,Wn,Bn,Qn,Xn,Gn,Zn,Vn,as,ns,ss,es,os,ts,ps,cs,ls,is,us,rs,ks;return c=new C({props:{$$slots:{default:[j]},$$scope:{ctx:a}}}),U=new C({props:{$$slots:{default:[$]},$$scope:{ctx:a}}}),{c(){n=d("p"),s=m("Durante estas últimas semanas he estado trabajando con un proyecto utilizando React Native, y si bien React Native es, de alguna manera, 90% simplemente React, es tambien cierto que crea nuevos desafios."),e=v(),o(c.$$.fragment),l=v(),k=d("p"),R=m("Algunos de estos:"),z=v(),N=d("ul"),q=d("li"),A=m("desafíos son el nuevo ambiente de desarrollo: El ciclo de desarrollo y feedback es un poco más lento o forzoso en comparación con el rápido feedback obtenido al desarrollar una web utilizando por ejemplo create-react-app."),S=v(),D=d("li"),O=m("Diferentes primitivas: Las primitivas utilizadas para crear la interfaz en una aplicación React Native son diferentes y si bien en mi caso esto no fue algo nuevo ya que he hecho algunas otras app con React Native, si implica tener que "),T=d("a"),M=m("mirar la documentacion"),x=m(" basstante seguido para revisar algunas props o algunos elementos disponibles."),J=v(),H=d("li"),L=m("Es necesario implementar modulos nativos para resolver alguna tareas: Si bien la API de React Native y de herramientas como "),_=d("a"),K=m("expo"),I=m(" cubren gran parte de los casos de uso de una aplicación móvil genérica, muchas veces tenemos que crear nuestros propios módulos para resolver casos más complejos."),F=v(),o(U.$$.fragment),Y=v(),W=d("p"),B=m("Es en este último desafío es en donde pase la última semana, implementando un wrapper en Java para exponer una API de un SDK."),Q=v(),X=d("p"),G=m("Cuando desarrollas una aplicación web utilizando Javascript el uso de funciones asíncronas es parte del día a día y para lograr esa asincronicidad hay dos métodos posibles: Callbacks y Promesas."),Z=v(),V=d("h2"),aa=m("Callbacks"),na=v(),sa=d("p"),ea=m("Estas son parte esencial de Javascript y han estado presentes desde el inicio de los tiempos. ¿Que son?, de forma muy simple, una callback es una función que es pasado como argumento a otra función y es después llamada desde el interior de la función cuando termina de ejecutar alguna tarea."),oa=v(),ta=d("p"),pa=m("Un ejemplo es el uso de "),ca=d("code"),la=m("setTimeout"),ia=v(),ua=d("pre"),ra=v(),ka=d("h2"),da=m("Promises"),ma=v(),va=d("p"),fa=m("Una Promesa es una implementación un poco más robusta para resolver el problema de asincronicidad. En palabras generales, una promesa es “algo que pasará en el futuro”, basicamente es una función que recibe una instrucción de hacer alguna tarea y te responde “Aún no tengo los dato, pero dame tu contacto y cuano tenga los dato de aviso”. ¿Cómo se ve en código?"),ha=v(),ga=d("pre"),ba=v(),ya=d("p"),Ea=m("Para “capturar” esta promesa se utiliza "),wa=d("code"),Pa=m("then"),Ra=m(" para definir que hacer cuando la promesa retorna “se resuelve” y "),Ca=d("code"),ja=m("catch"),$a=m(" para definir que hacer cuando la promesa falla."),za=v(),Na=d("p"),qa=m("Actualmente Javascript ofrece algo de "),Aa=d("code"),Sa=m("syntaxis sugar"),Da=m(" utilizando "),Oa=d("code"),Ta=m("async/await"),Ma=v(),xa=d("pre"),Ja=v(),Ha=d("h2"),La=m("Módulos Nativos"),_a=v(),Ka=d("p"),Ia=m("React Native ofrece  algunas estructuras de datos que permiten ofrecen esta experiencia en los métodos expuestos. Existen dos estructuras utilizadas como argumentos "),Fa=d("code"),Ua=m("Callback"),Ya=m(" y "),Wa=d("code"),Ba=m("Promise"),Qa=m("."),Xa=v(),Ga=d("h3"),Za=m("Callbacks Nativas"),Va=v(),an=d("p"),nn=d("code"),sn=m("Callback"),en=m(" es utilizado para proveer el resultado del llamado de la función hacia Javascript.\nEn el caso de iOS utilizando Objective-C"),on=v(),tn=d("pre"),pn=v(),cn=d("p"),ln=m("O en su version Java"),un=v(),rn=d("pre"),kn=v(),dn=d("p"),mn=m("Y después simplemente se utiliza en nuestro código Javacript"),vn=v(),fn=d("pre"),hn=v(),gn=d("p"),bn=m("El módulo nativo debe invocar el callback sólo una vez. También es posible almacenar el callback y llamarlo en otro punto del código. De hecho esto es lo que tuve que realizar ya que el SDK utilizado tiene sus propios "),yn=d("code"),En=m("observers"),wn=m("."),Pn=v(),Rn=d("p"),Cn=m("Java"),jn=v(),$n=d("pre"),zn=v(),Nn=d("h3"),qn=m("Promises Nativas"),An=v(),Sn=d("p"),Dn=m("React Native también provee de una estructura de datos que puede definir una Promesa, que permite simplificar un poco el código asíncrono, sobre todo si se utiliza "),On=d("code"),Tn=m("async/await"),Mn=m(". Para definir el uso de una promesa, es decir, determinar que una función retornará una promesa debes utilizar como último parámetro de la función este argumento."),xn=v(),Jn=d("p"),Hn=m("En el caso de iOS utilizando Objective-C"),Ln=v(),_n=d("pre"),Kn=v(),In=d("p"),Fn=m("O en su version Java"),Un=v(),Yn=d("pre"),Wn=v(),Bn=d("p"),Qn=m("Y despues simplemente se utiliza en nuestro código Javacript"),Xn=v(),Gn=d("pre"),Zn=v(),Vn=d("p"),as=m("Y de igual forma que en el ejemplo de uso de callbacks, también es posible almacenar la promesa y llamarla en otro punto del código."),ns=v(),ss=d("p"),es=m("Java"),os=v(),ts=d("pre"),ps=v(),cs=d("h2"),ls=m("Conclusión"),is=v(),us=d("p"),rs=m("Al desarrollar aplicaciones móviles utilizando React Native, ciertos casos de usos requieren el desarrollo de módulos nativos, y uno de los objetivos de estos módulos es ofrecer una experiencia de uso (al desarrollador) lo más cercana posible a una librería escrita en javascript, para esto React Native ofrece estructuras de datos que permiten desarrollar métodos nativos que soportan Callbacks y Promesas."),this.h()},l(a){n=f(a,"P",{});var o=h(n);s=g(o,"Durante estas últimas semanas he estado trabajando con un proyecto utilizando React Native, y si bien React Native es, de alguna manera, 90% simplemente React, es tambien cierto que crea nuevos desafios."),o.forEach(b),e=y(a),t(c.$$.fragment,a),l=y(a),k=f(a,"P",{});var p=h(k);R=g(p,"Algunos de estos:"),p.forEach(b),z=y(a),N=f(a,"UL",{});var i=h(N);q=f(i,"LI",{});var u=h(q);A=g(u,"desafíos son el nuevo ambiente de desarrollo: El ciclo de desarrollo y feedback es un poco más lento o forzoso en comparación con el rápido feedback obtenido al desarrollar una web utilizando por ejemplo create-react-app."),u.forEach(b),S=y(i),D=f(i,"LI",{});var r=h(D);O=g(r,"Diferentes primitivas: Las primitivas utilizadas para crear la interfaz en una aplicación React Native son diferentes y si bien en mi caso esto no fue algo nuevo ya que he hecho algunas otras app con React Native, si implica tener que "),T=f(r,"A",{href:!0,rel:!0});var d=h(T);M=g(d,"mirar la documentacion"),d.forEach(b),x=g(r," basstante seguido para revisar algunas props o algunos elementos disponibles."),r.forEach(b),J=y(i),H=f(i,"LI",{});var m=h(H);L=g(m,"Es necesario implementar modulos nativos para resolver alguna tareas: Si bien la API de React Native y de herramientas como "),_=f(m,"A",{href:!0,rel:!0});var v=h(_);K=g(v,"expo"),v.forEach(b),I=g(m," cubren gran parte de los casos de uso de una aplicación móvil genérica, muchas veces tenemos que crear nuestros propios módulos para resolver casos más complejos."),m.forEach(b),i.forEach(b),F=y(a),t(U.$$.fragment,a),Y=y(a),W=f(a,"P",{});var E=h(W);B=g(E,"Es en este último desafío es en donde pase la última semana, implementando un wrapper en Java para exponer una API de un SDK."),E.forEach(b),Q=y(a),X=f(a,"P",{});var w=h(X);G=g(w,"Cuando desarrollas una aplicación web utilizando Javascript el uso de funciones asíncronas es parte del día a día y para lograr esa asincronicidad hay dos métodos posibles: Callbacks y Promesas."),w.forEach(b),Z=y(a),V=f(a,"H2",{id:!0});var P=h(V);aa=g(P,"Callbacks"),P.forEach(b),na=y(a),sa=f(a,"P",{});var C=h(sa);ea=g(C,"Estas son parte esencial de Javascript y han estado presentes desde el inicio de los tiempos. ¿Que son?, de forma muy simple, una callback es una función que es pasado como argumento a otra función y es después llamada desde el interior de la función cuando termina de ejecutar alguna tarea."),C.forEach(b),oa=y(a),ta=f(a,"P",{});var j=h(ta);pa=g(j,"Un ejemplo es el uso de "),ca=f(j,"CODE",{});var $=h(ca);la=g($,"setTimeout"),$.forEach(b),j.forEach(b),ia=y(a),ua=f(a,"PRE",{class:!0}),h(ua).forEach(b),ra=y(a),ka=f(a,"H2",{id:!0});var ks=h(ka);da=g(ks,"Promises"),ks.forEach(b),ma=y(a),va=f(a,"P",{});var ds=h(va);fa=g(ds,"Una Promesa es una implementación un poco más robusta para resolver el problema de asincronicidad. En palabras generales, una promesa es “algo que pasará en el futuro”, basicamente es una función que recibe una instrucción de hacer alguna tarea y te responde “Aún no tengo los dato, pero dame tu contacto y cuano tenga los dato de aviso”. ¿Cómo se ve en código?"),ds.forEach(b),ha=y(a),ga=f(a,"PRE",{class:!0}),h(ga).forEach(b),ba=y(a),ya=f(a,"P",{});var ms=h(ya);Ea=g(ms,"Para “capturar” esta promesa se utiliza "),wa=f(ms,"CODE",{});var vs=h(wa);Pa=g(vs,"then"),vs.forEach(b),Ra=g(ms," para definir que hacer cuando la promesa retorna “se resuelve” y "),Ca=f(ms,"CODE",{});var fs=h(Ca);ja=g(fs,"catch"),fs.forEach(b),$a=g(ms," para definir que hacer cuando la promesa falla."),ms.forEach(b),za=y(a),Na=f(a,"P",{});var hs=h(Na);qa=g(hs,"Actualmente Javascript ofrece algo de "),Aa=f(hs,"CODE",{});var gs=h(Aa);Sa=g(gs,"syntaxis sugar"),gs.forEach(b),Da=g(hs," utilizando "),Oa=f(hs,"CODE",{});var bs=h(Oa);Ta=g(bs,"async/await"),bs.forEach(b),hs.forEach(b),Ma=y(a),xa=f(a,"PRE",{class:!0}),h(xa).forEach(b),Ja=y(a),Ha=f(a,"H2",{id:!0});var ys=h(Ha);La=g(ys,"Módulos Nativos"),ys.forEach(b),_a=y(a),Ka=f(a,"P",{});var Es=h(Ka);Ia=g(Es,"React Native ofrece  algunas estructuras de datos que permiten ofrecen esta experiencia en los métodos expuestos. Existen dos estructuras utilizadas como argumentos "),Fa=f(Es,"CODE",{});var ws=h(Fa);Ua=g(ws,"Callback"),ws.forEach(b),Ya=g(Es," y "),Wa=f(Es,"CODE",{});var Ps=h(Wa);Ba=g(Ps,"Promise"),Ps.forEach(b),Qa=g(Es,"."),Es.forEach(b),Xa=y(a),Ga=f(a,"H3",{id:!0});var Rs=h(Ga);Za=g(Rs,"Callbacks Nativas"),Rs.forEach(b),Va=y(a),an=f(a,"P",{});var Cs=h(an);nn=f(Cs,"CODE",{});var js=h(nn);sn=g(js,"Callback"),js.forEach(b),en=g(Cs," es utilizado para proveer el resultado del llamado de la función hacia Javascript.\nEn el caso de iOS utilizando Objective-C"),Cs.forEach(b),on=y(a),tn=f(a,"PRE",{class:!0}),h(tn).forEach(b),pn=y(a),cn=f(a,"P",{});var $s=h(cn);ln=g($s,"O en su version Java"),$s.forEach(b),un=y(a),rn=f(a,"PRE",{class:!0}),h(rn).forEach(b),kn=y(a),dn=f(a,"P",{});var zs=h(dn);mn=g(zs,"Y después simplemente se utiliza en nuestro código Javacript"),zs.forEach(b),vn=y(a),fn=f(a,"PRE",{class:!0}),h(fn).forEach(b),hn=y(a),gn=f(a,"P",{});var Ns=h(gn);bn=g(Ns,"El módulo nativo debe invocar el callback sólo una vez. También es posible almacenar el callback y llamarlo en otro punto del código. De hecho esto es lo que tuve que realizar ya que el SDK utilizado tiene sus propios "),yn=f(Ns,"CODE",{});var qs=h(yn);En=g(qs,"observers"),qs.forEach(b),wn=g(Ns,"."),Ns.forEach(b),Pn=y(a),Rn=f(a,"P",{});var As=h(Rn);Cn=g(As,"Java"),As.forEach(b),jn=y(a),$n=f(a,"PRE",{class:!0}),h($n).forEach(b),zn=y(a),Nn=f(a,"H3",{id:!0});var Ss=h(Nn);qn=g(Ss,"Promises Nativas"),Ss.forEach(b),An=y(a),Sn=f(a,"P",{});var Ds=h(Sn);Dn=g(Ds,"React Native también provee de una estructura de datos que puede definir una Promesa, que permite simplificar un poco el código asíncrono, sobre todo si se utiliza "),On=f(Ds,"CODE",{});var Os=h(On);Tn=g(Os,"async/await"),Os.forEach(b),Mn=g(Ds,". Para definir el uso de una promesa, es decir, determinar que una función retornará una promesa debes utilizar como último parámetro de la función este argumento."),Ds.forEach(b),xn=y(a),Jn=f(a,"P",{});var Ts=h(Jn);Hn=g(Ts,"En el caso de iOS utilizando Objective-C"),Ts.forEach(b),Ln=y(a),_n=f(a,"PRE",{class:!0}),h(_n).forEach(b),Kn=y(a),In=f(a,"P",{});var Ms=h(In);Fn=g(Ms,"O en su version Java"),Ms.forEach(b),Un=y(a),Yn=f(a,"PRE",{class:!0}),h(Yn).forEach(b),Wn=y(a),Bn=f(a,"P",{});var xs=h(Bn);Qn=g(xs,"Y despues simplemente se utiliza en nuestro código Javacript"),xs.forEach(b),Xn=y(a),Gn=f(a,"PRE",{class:!0}),h(Gn).forEach(b),Zn=y(a),Vn=f(a,"P",{});var Js=h(Vn);as=g(Js,"Y de igual forma que en el ejemplo de uso de callbacks, también es posible almacenar la promesa y llamarla en otro punto del código."),Js.forEach(b),ns=y(a),ss=f(a,"P",{});var Hs=h(ss);es=g(Hs,"Java"),Hs.forEach(b),os=y(a),ts=f(a,"PRE",{class:!0}),h(ts).forEach(b),ps=y(a),cs=f(a,"H2",{id:!0});var Ls=h(cs);ls=g(Ls,"Conclusión"),Ls.forEach(b),is=y(a),us=f(a,"P",{});var _s=h(us);rs=g(_s,"Al desarrollar aplicaciones móviles utilizando React Native, ciertos casos de usos requieren el desarrollo de módulos nativos, y uno de los objetivos de estos módulos es ofrecer una experiencia de uso (al desarrollador) lo más cercana posible a una librería escrita en javascript, para esto React Native ofrece estructuras de datos que permiten desarrollar métodos nativos que soportan Callbacks y Promesas."),_s.forEach(b),this.h()},h(){E(T,"href","http://reactnative.dev/"),E(T,"rel","nofollow"),E(_,"href","http://expo.io/"),E(_,"rel","nofollow"),E(V,"id","callbacks"),E(ua,"class","language-javascript"),E(ka,"id","promises"),E(ga,"class","language-javascript"),E(xa,"class","language-javascript"),E(Ha,"id","módulos-nativos"),E(Ga,"id","callbacks-nativas"),E(tn,"class","language-objectivec"),E(rn,"class","language-java"),E(fn,"class","language-javascript"),E($n,"class","language-java"),E(Nn,"id","promises-nativas"),E(_n,"class","language-objectivec"),E(Yn,"class","language-java"),E(Gn,"class","language-javascript"),E(ts,"class","language-java"),E(cs,"id","conclusión")},m(a,o){w(a,n,o),P(n,s),w(a,e,o),p(c,a,o),w(a,l,o),w(a,k,o),P(k,R),w(a,z,o),w(a,N,o),P(N,q),P(q,A),P(N,S),P(N,D),P(D,O),P(D,T),P(T,M),P(D,x),P(N,J),P(N,H),P(H,L),P(H,_),P(_,K),P(H,I),w(a,F,o),p(U,a,o),w(a,Y,o),w(a,W,o),P(W,B),w(a,Q,o),w(a,X,o),P(X,G),w(a,Z,o),w(a,V,o),P(V,aa),w(a,na,o),w(a,sa,o),P(sa,ea),w(a,oa,o),w(a,ta,o),P(ta,pa),P(ta,ca),P(ca,la),w(a,ia,o),w(a,ua,o),ua.innerHTML='<code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">customSetTimeout</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>\n        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token comment">//Esta tambien es un callback</span>\n            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Set timeout terminado\'</span><span class="token punctuation">)</span>\n            <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Ejecuta el callback cuando setTimeout termino</span>\n        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//1 segundo</span>\n    <span class="token punctuation">&#125;</span></code>',w(a,ra,o),w(a,ka,o),P(ka,da),w(a,ma,o),w(a,va,o),P(va,fa),w(a,ha,o),w(a,ga,o),ga.innerHTML='<code class="language-javascript">    <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">\'https://someapi.com\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>\n        <span class="token function">doSomethingWithData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>\n    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>\n        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>\n    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code>',w(a,ba,o),w(a,ya,o),P(ya,Ea),P(ya,wa),P(wa,Pa),P(ya,Ra),P(ya,Ca),P(Ca,ja),P(ya,$a),w(a,za,o),w(a,Na,o),P(Na,qa),P(Na,Aa),P(Aa,Sa),P(Na,Da),P(Na,Oa),P(Oa,Ta),w(a,Ma,o),w(a,xa,o),xa.innerHTML='<code class="language-javascript">    <span class="token keyword">const</span> <span class="token function-variable function">getData</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>\n        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>\n            <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">\'https://someapi.com\'</span><span class="token punctuation">)</span>\n            <span class="token function">doSomethingWithData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>\n        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>\n            console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>\n        <span class="token punctuation">&#125;</span>\n    <span class="token punctuation">&#125;</span></code>',w(a,Ja,o),w(a,Ha,o),P(Ha,La),w(a,_a,o),w(a,Ka,o),P(Ka,Ia),P(Ka,Fa),P(Fa,Ua),P(Ka,Ya),P(Ka,Wa),P(Wa,Ba),P(Ka,Qa),w(a,Xa,o),w(a,Ga,o),P(Ga,Za),w(a,Va,o),w(a,an,o),P(an,nn),P(nn,sn),P(an,en),w(a,on,o),w(a,tn,o),tn.innerHTML='<code class="language-objectivec">    <span class="token function">RTC_EXPORT_METHOD</span><span class="token punctuation">(</span>nativeFetchApi<span class="token punctuation">:</span><span class="token punctuation">(</span>RCTResponseSenderBlock<span class="token punctuation">)</span>callback<span class="token punctuation">)</span>\n    <span class="token punctuation">&#123;</span>\n      NSArray <span class="token operator">*</span>array <span class="token operator">=</span> AwesomeSDK<span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token function">callback</span><span class="token punctuation">(</span><span class="token operator">@</span><span class="token punctuation">[</span>NSNull null<span class="token punctuation">]</span><span class="token punctuation">,</span> array<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">&#125;</span></code>',w(a,pn,o),w(a,cn,o),P(cn,ln),w(a,un,o),w(a,rn,o),rn.innerHTML='<code class="language-java">    <span class="token annotation punctuation">@ReactMethod</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">nativeFetchApi</span><span class="token punctuation">(</span><span class="token class-name">Callback</span> callback<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n        <span class="token class-name">WritableArray</span> array <span class="token operator">=</span> <span class="token class-name">AwesomeSDK</span><span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        callback<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span>\n    <span class="token punctuation">&#125;</span></code>',w(a,kn,o),w(a,dn,o),P(dn,mn),w(a,vn,o),w(a,fn,o),fn.innerHTML='<code class="language-javascript">    <span class="token keyword">const</span> <span class="token function-variable function">fetchCallback</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>\n        <span class="token function">doSomethingCool</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>\n    <span class="token punctuation">&#125;</span>\n    NativeModules<span class="token punctuation">.</span>MyAwesomeModule<span class="token punctuation">.</span><span class="token function">nativeFetchApi</span><span class="token punctuation">(</span>fetchCallback<span class="token punctuation">)</span><span class="token punctuation">;</span></code>',w(a,hn,o),w(a,gn,o),P(gn,bn),P(gn,yn),P(yn,En),P(gn,wn),w(a,Pn,o),w(a,Rn,o),P(Rn,Cn),w(a,jn,o),w(a,$n,o),$n.innerHTML='<code class="language-java">    <span class="token keyword">private</span> <span class="token class-name">Callback</span> privateCallback <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n    <span class="token annotation punctuation">@ReactMethod</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">nativeSdkSingin</span><span class="token punctuation">(</span><span class="token class-name">Callback</span> callback<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>privateCallback <span class="token operator">=</span> callback<span class="token punctuation">;</span>\n        <span class="token class-name">AwesomeSDK</span><span class="token punctuation">.</span><span class="token function">signin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">&#125;</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">signinObserver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>privateCallback <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span>privateCallback<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">&#125;</span><span class="token number">38</span>k\n        <span class="token keyword">this</span><span class="token punctuation">.</span>privateCallback <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n    <span class="token punctuation">&#125;</span></code>',w(a,zn,o),w(a,Nn,o),P(Nn,qn),w(a,An,o),w(a,Sn,o),P(Sn,Dn),P(Sn,On),P(On,Tn),P(Sn,Mn),w(a,xn,o),w(a,Jn,o),P(Jn,Hn),w(a,Ln,o),w(a,_n,o),_n.innerHTML='<code class="language-objectivec">    <span class="token function">RTC_EXPORT_METHOD</span><span class="token punctuation">(</span>nativeFetchApi<span class="token punctuation">,</span>\n                     nativeFetchApiWithResolver<span class="token punctuation">:</span><span class="token punctuation">(</span>RCTPromiseResolveBlock<span class="token punctuation">)</span>resolve\n                     rejecter<span class="token punctuation">:</span><span class="token punctuation">(</span>RCTPromiseRejectBlock<span class="token punctuation">)</span>reject<span class="token punctuation">)</span>\n    <span class="token punctuation">&#123;</span>\n        NSArray <span class="token operator">*</span>array <span class="token operator">=</span> AwesomeSDK<span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>\n            <span class="token function">resolve</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span>\n        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>\n            NSError <span class="token operator">*</span>error <span class="token operator">=</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n            <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">@"no_data"</span><span class="token punctuation">,</span> <span class="token string">@"No hay datos"</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span>\n        <span class="token punctuation">&#125;</span>\n    <span class="token punctuation">&#125;</span></code>',w(a,Kn,o),w(a,In,o),P(In,Fn),w(a,Un,o),w(a,Yn,o),Yn.innerHTML='<code class="language-java">    <span class="token annotation punctuation">@ReactMethod</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">nativeFetchApi</span><span class="token punctuation">(</span><span class="token class-name">Promise</span> promise<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>\n            <span class="token class-name">WritableArray</span> array <span class="token operator">=</span> <span class="token class-name">AwesomeSDK</span><span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span>\n        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>\n            promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">\'...\'</span><span class="token punctuation">)</span>\n        <span class="token punctuation">&#125;</span>\n\n    <span class="token punctuation">&#125;</span></code>',w(a,Wn,o),w(a,Bn,o),P(Bn,Qn),w(a,Xn,o),w(a,Gn,o),Gn.innerHTML='<code class="language-javascript">    <span class="token keyword">const</span> <span class="token function-variable function">fetchNativeData</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>\n        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>\n            <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> NativeModules<span class="token punctuation">.</span>MyAwesomeModule<span class="token punctuation">.</span><span class="token function">nativeFetchApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token function">doSomethingCool</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>\n        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>\n            console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>\n        <span class="token punctuation">&#125;</span>\n    <span class="token punctuation">&#125;</span></code>',w(a,Zn,o),w(a,Vn,o),P(Vn,as),w(a,ns,o),w(a,ss,o),P(ss,es),w(a,os,o),w(a,ts,o),ts.innerHTML='<code class="language-java">    <span class="token keyword">private</span> <span class="token class-name">Promise</span> privatePromise <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n    <span class="token annotation punctuation">@ReactMethod</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">nativeSdkSingin</span><span class="token punctuation">(</span><span class="token class-name">Promise</span> promise<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>privatePromise <span class="token operator">=</span> promise<span class="token punctuation">;</span>\n        <span class="token class-name">AwesomeSDK</span><span class="token punctuation">.</span><span class="token function">signin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">&#125;</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">signinObserver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>privatePromise <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span>privatePromise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">&#125;</span><span class="token number">38</span>k\n        <span class="token keyword">this</span><span class="token punctuation">.</span>privatePromise <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n    <span class="token punctuation">&#125;</span></code>',w(a,ps,o),w(a,cs,o),P(cs,ls),w(a,is,o),w(a,us,o),P(us,rs),ks=!0},p(a,n){const s={};2&n&&(s.$$scope={dirty:n,ctx:a}),c.$set(s);const e={};2&n&&(e.$$scope={dirty:n,ctx:a}),U.$set(e)},i(a){ks||(i(c.$$.fragment,a),i(U.$$.fragment,a),ks=!0)},o(a){u(c.$$.fragment,a),u(U.$$.fragment,a),ks=!1},d(a){a&&b(n),a&&b(e),r(c,a),a&&b(l),a&&b(k),a&&b(z),a&&b(N),a&&b(F),r(U,a),a&&b(Y),a&&b(W),a&&b(Q),a&&b(X),a&&b(Z),a&&b(V),a&&b(na),a&&b(sa),a&&b(oa),a&&b(ta),a&&b(ia),a&&b(ua),a&&b(ra),a&&b(ka),a&&b(ma),a&&b(va),a&&b(ha),a&&b(ga),a&&b(ba),a&&b(ya),a&&b(za),a&&b(Na),a&&b(Ma),a&&b(xa),a&&b(Ja),a&&b(Ha),a&&b(_a),a&&b(Ka),a&&b(Xa),a&&b(Ga),a&&b(Va),a&&b(an),a&&b(on),a&&b(tn),a&&b(pn),a&&b(cn),a&&b(un),a&&b(rn),a&&b(kn),a&&b(dn),a&&b(vn),a&&b(fn),a&&b(hn),a&&b(gn),a&&b(Pn),a&&b(Rn),a&&b(jn),a&&b($n),a&&b(zn),a&&b(Nn),a&&b(An),a&&b(Sn),a&&b(xn),a&&b(Jn),a&&b(Ln),a&&b(_n),a&&b(Kn),a&&b(In),a&&b(Un),a&&b(Yn),a&&b(Wn),a&&b(Bn),a&&b(Xn),a&&b(Gn),a&&b(Zn),a&&b(Vn),a&&b(ns),a&&b(ss),a&&b(os),a&&b(ts),a&&b(ps),a&&b(cs),a&&b(is),a&&b(us)}}}function N(a){let n,s;const k=[a[0],q];let d={$$slots:{default:[z]},$$scope:{ctx:a}};for(let o=0;o<k.length;o+=1)d=e(d,k[o]);return n=new R({props:d}),{c(){o(n.$$.fragment)},l(a){t(n.$$.fragment,a)},m(a,e){p(n,a,e),s=!0},p(a,[s]){const e=1&s?c(k,[1&s&&l(a[0]),0&s&&l(q)]):{};2&s&&(e.$$scope={dirty:s,ctx:a}),n.$set(e)},i(a){s||(i(n.$$.fragment,a),s=!0)},o(a){u(n.$$.fragment,a),s=!1},d(a){r(n,a)}}}const q={date:"2020-11-13T14:11:55.000Z",banner:"https://res.cloudinary.com/matiasfha/image/upload/v1605277342/mark-konig-IwRPMHU1PpE-unsplash_ejulel.jpg",keywords:["React Native","Modulos Nativos","Native Module","Promises","Callbacks"],tag:"Seed",title:"React Native: Promesas y Callbacks en módulos nativos",description:"React Native ofrece estructuras de datos que permiten desarrollar módulos nativos que exponen el uso de Promesas y Callbacks a tu aplicación React Native",bannerCredit:'<span>Photo by <a href="https://unsplash.com/@markkoenig?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Mark König</a> on <a href="https://unsplash.com/s/photos/module?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Unsplash</a></span>',favorite:!0};function A(a,n,s){return a.$$set=a=>{s(0,n=e(e({},n),k(a)))},[n=k(n)]}class S extends a{constructor(a){super(),n(this,a,A,N,s,{})}}export{S as default,q as metadata};
