import{S as a,i as n,s,B as t,j as e,m as p,o,p as c,q as l,x as u,u as i,v as r,N as k,e as d,t as m,k as g,c as v,a as f,g as h,d as b,n as P,b as x,f as q,G as y}from"../../../chunks/vendor-64eebebd.js";import{P as z}from"../../../chunks/PostLayout-1d1b8b8e.js";import{E}from"../../../chunks/EggheadLesson-5d77fb7e.js";import{Q as w}from"../../../chunks/Quote-982ae035.js";function j(a){let n,s,t,e,p,o,c,l;return{c(){n=d("p"),s=m("Puedes ver este video en "),t=d("a"),e=m("egghead.io"),p=m(".\nEste video es parte de una "),o=d("a"),c=m("colección"),l=m(" en donde se muestra progresivamente como crear un componente utilizando diferentes hooks y patrones de diseño"),this.h()},l(a){n=v(a,"P",{});var u=f(n);s=h(u,"Puedes ver este video en "),t=v(u,"A",{href:!0,rel:!0});var i=f(t);e=h(i,"egghead.io"),i.forEach(b),p=h(u,".\nEste video es parte de una "),o=v(u,"A",{href:!0,rel:!0});var r=f(o);c=h(r,"colección"),r.forEach(b),l=h(u," en donde se muestra progresivamente como crear un componente utilizando diferentes hooks y patrones de diseño"),u.forEach(b),this.h()},h(){x(t,"href","https://egghead.io/lessons/react-crear-un-componente-wizard-usando-usestate-react-hooks?pl=hooks-3d62⁡=4cexzz"),x(t,"rel","nofollow"),x(o,"href","https://egghead.io/playlists/hooks-3d62⁡=4cexzz"),x(o,"rel","nofollow")},m(a,u){q(a,n,u),y(n,s),y(n,t),y(t,e),y(n,p),y(n,o),y(o,c),y(n,l)},d(a){a&&b(n)}}}function $(a){let n,s,t,c,l,k,z,$,I,_,C,S,N,A,R,D,O,T,L,W,B,H,U,M,G,Q,Z,F,J,K,V,X,Y,aa,na,sa,ta,ea,pa,oa,ca,la,ua,ia,ra,ka,da,ma,ga,va,fa,ha,ba,Pa,xa,qa,ya,za,Ea,wa,ja,$a,Ia,_a,Ca,Sa,Na,Aa,Ra,Da,Oa,Ta,La,Wa,Ba,Ha,Ua,Ma,Ga,Qa,Za,Fa,Ja,Ka,Va,Xa,Ya,an,nn,sn,tn,en,pn,on,cn,ln,un,rn,kn,dn,mn,gn,vn,fn,hn,bn,Pn,xn,qn,yn,zn,En,wn,jn,$n,In,_n,Cn,Sn,Nn,An,Rn;return c=new w({props:{$$slots:{default:[j]},$$scope:{ctx:a}}}),k=new E({props:{lessonId:"react-crear-un-componente-wizard-usando-usestate-react-hooks"}}),{c(){n=d("h2"),s=m("TLDR;"),t=g(),e(c.$$.fragment),l=g(),e(k.$$.fragment),z=g(),$=d("p"),I=m("Un "),_=d("strong"),C=m("Wizard"),S=m(" o "),N=d("strong"),A=m("multi-step"),R=m(" es un componente que puede contenir multiples “páginas” pero que sólo renderiza una de ellas y permite navegar hacia delante o atrás entre las páginas restantes. Este tipo de componentes son usualmente utilizados para renderizar formularios largos dividiendolos en diferentes “pasos”."),D=g(),O=d("p"),T=m("Este tipo de componentes requieren el manejo de un estado interno para poder decidir que “página” se debe renderizar y como los botones del componente deben actuar ante el evento click. La forma que React ofrece para manejar estados internos es utilizando el hook "),L=d("code"),W=m("React.useState"),B=g(),H=d("p"),U=m("La forma más sencilla de este componente utiliza un estado sencillo que solo indica el indice de la página “actual”, es decir, la que se mostrará en pantalla."),M=g(),G=d("p"),Q=m("En este ejemplo podemos ver el uso de useState, y como utilizar la forma funcional de la función actualizadora para acceder al estado actual y modificarlo."),Z=g(),F=d("p"),J=m("Para comenzar, crearemos la base de nuestro componente creando un contenedor que mantendrá otros dos contenedores, uno para el contenido que se renderizará y otro para los botones necesarios para la navegación."),K=g(),V=d("pre"),X=g(),Y=d("p"),aa=m("Con esto en su lugar ya podemos definir los componentes que irán dentro de nuestro wizard y definir el aspecto que tendrán cuando sean renderizados para eso crearemos en este caso tres componentes simples que llamaremos page que simplemente contienen un título indicando la página a la que corresponden y agregamos esto dentro de nuestra aplicación."),na=g(),sa=d("pre"),ta=g(),ea=d("p"),pa=m("Nuestro objetivo ahora es mostrar una página a la vez, por lo que necesitamos manipular los componentes que el wizard recibe. Para esto, utilizaremos la API React.Children que permite manipular el objeto children, en este caso, convirtiéndolo a un arreglo de elementos.\nTambién usaremos una variable auxiliar "),oa=d("code"),ca=m("currentPage"),la=m(" que mantendrá la página que se renderizará y utilizaremos un índice para indicar la selección. En este caso utilizamos el primer indice lo que renderizará sólo la prima página que hemos creado."),ua=g(),ia=d("pre"),ra=g(),ka=d("p"),da=m("Ahora es cuando entra en juego el hook "),ma=d("code"),ga=m("useState"),va=m("."),fa=g(),ha=d("p"),ba=m("Es necesario que el componente seleccionado en currentPage sea variable, se modifique con el tiempo, y cambie cuando se hace click en alguno de los botones. Esto es que cambie el estado de nuestro componente."),Pa=g(),xa=d("p"),qa=m("Este estado lo podemos manejar con el hook "),ya=d("code"),za=m("useState"),Ea=m(" que retorna el arreglo con dos elementos, un valor que llamamos "),wa=d("code"),ja=m("activePageIndex"),$a=m(" y una función que sirve para definir el valor del estado que llamaremos "),Ia=d("code"),_a=m("setActivePageIndex"),Ca=m("."),Sa=g(),Na=d("pre"),Aa=g(),Ra=d("p"),Da=m("Además, useState puede recibir un valor inicial que será en este caso el primer índice. Con esto, ya podemos usar el valor de "),Oa=d("code"),Ta=m("activePageIndex"),La=m(" para definir qué se renderiza en cada momento. Recuerda que cada llamada al componente tiene su propio valor de "),Wa=d("code"),Ba=m("activePageIndex"),Ha=m("."),Ua=g(),Ma=d("p"),Ga=m("Utilizaremos el valor de "),Qa=d("code"),Za=m("activePageIndex"),Fa=m(" para definir si se muestra o no cada botón. Para eso simplemente escribimos una condicional ternaría indicando que se renderice el botón con cierta condición o se renderice null."),Ja=g(),Ka=d("pre"),Va=g(),Xa=d("p"),Ya=m("En el caso del botón atrás, se renderizará sólo si "),an=d("code"),nn=m("activePageIndex"),sn=m(", que es el índice, sea mayor que "),tn=d("code"),en=m("0"),pn=m(", y en el caso del botón Siguiente, se renderizará sólo si "),on=d("code"),cn=m("activePageIndex"),ln=m(" es menor que el total de ítems dentro de las páginas. Aún los botones no hace específicamente nada. Es necesario que el estado pueda cambiar."),un=g(),rn=d("p"),kn=m("Para eso, definiremos dos funciones, una para cuando el botón atrás es presionado y otra para el botón siguiente. Para el botón atrás, simplemente disminuimos el valor del índice. Para eso, utilizamos la forma funcional de la función de actualización, la función "),dn=d("code"),mn=m("setActivePageIndex"),gn=m("."),vn=g(),fn=d("p"),hn=m("Este método puede recibir una función que recibe como parámetro el estado actual y modifica el estado en base al valor retornado. En este caso, disminuye el índice en -1. De forma similar al presionar el botón Siguiente, el índice se incrementará en 1."),bn=g(),Pn=d("pre"),xn=g(),qn=d("p"),yn=m("Agregamos estos manejadores de eventos a cada botón y con esto ya tenemos una versión simplificada de un componente que permite navegar entre los elementos renderizados utilizando "),zn=d("code"),En=m("useState"),wn=m(" para manejar el estado."),jn=g(),$n=d("p"),In=d("code"),_n=m("useState"),Cn=m(" permite manejar el estado de un componente definido como una función. "),Sn=d("code"),Nn=m("useState"),An=m(" retorna un arreglo con dos elementos, el valor del estado y una función para modificar ese estado. Es posible pasar una función como argumento a la función modificadora, lo que permite acceder al estado actual y retornar el nuevo estado"),this.h()},l(a){n=v(a,"H2",{id:!0});var e=f(n);s=h(e,"TLDR;"),e.forEach(b),t=P(a),p(c.$$.fragment,a),l=P(a),p(k.$$.fragment,a),z=P(a),$=v(a,"P",{});var o=f($);I=h(o,"Un "),_=v(o,"STRONG",{});var u=f(_);C=h(u,"Wizard"),u.forEach(b),S=h(o," o "),N=v(o,"STRONG",{});var i=f(N);A=h(i,"multi-step"),i.forEach(b),R=h(o," es un componente que puede contenir multiples “páginas” pero que sólo renderiza una de ellas y permite navegar hacia delante o atrás entre las páginas restantes. Este tipo de componentes son usualmente utilizados para renderizar formularios largos dividiendolos en diferentes “pasos”."),o.forEach(b),D=P(a),O=v(a,"P",{});var r=f(O);T=h(r,"Este tipo de componentes requieren el manejo de un estado interno para poder decidir que “página” se debe renderizar y como los botones del componente deben actuar ante el evento click. La forma que React ofrece para manejar estados internos es utilizando el hook "),L=v(r,"CODE",{});var d=f(L);W=h(d,"React.useState"),d.forEach(b),r.forEach(b),B=P(a),H=v(a,"P",{});var m=f(H);U=h(m,"La forma más sencilla de este componente utiliza un estado sencillo que solo indica el indice de la página “actual”, es decir, la que se mostrará en pantalla."),m.forEach(b),M=P(a),G=v(a,"P",{});var g=f(G);Q=h(g,"En este ejemplo podemos ver el uso de useState, y como utilizar la forma funcional de la función actualizadora para acceder al estado actual y modificarlo."),g.forEach(b),Z=P(a),F=v(a,"P",{});var x=f(F);J=h(x,"Para comenzar, crearemos la base de nuestro componente creando un contenedor que mantendrá otros dos contenedores, uno para el contenido que se renderizará y otro para los botones necesarios para la navegación."),x.forEach(b),K=P(a),V=v(a,"PRE",{class:!0}),f(V).forEach(b),X=P(a),Y=v(a,"P",{});var q=f(Y);aa=h(q,"Con esto en su lugar ya podemos definir los componentes que irán dentro de nuestro wizard y definir el aspecto que tendrán cuando sean renderizados para eso crearemos en este caso tres componentes simples que llamaremos page que simplemente contienen un título indicando la página a la que corresponden y agregamos esto dentro de nuestra aplicación."),q.forEach(b),na=P(a),sa=v(a,"PRE",{class:!0}),f(sa).forEach(b),ta=P(a),ea=v(a,"P",{});var y=f(ea);pa=h(y,"Nuestro objetivo ahora es mostrar una página a la vez, por lo que necesitamos manipular los componentes que el wizard recibe. Para esto, utilizaremos la API React.Children que permite manipular el objeto children, en este caso, convirtiéndolo a un arreglo de elementos.\nTambién usaremos una variable auxiliar "),oa=v(y,"CODE",{});var E=f(oa);ca=h(E,"currentPage"),E.forEach(b),la=h(y," que mantendrá la página que se renderizará y utilizaremos un índice para indicar la selección. En este caso utilizamos el primer indice lo que renderizará sólo la prima página que hemos creado."),y.forEach(b),ua=P(a),ia=v(a,"PRE",{class:!0}),f(ia).forEach(b),ra=P(a),ka=v(a,"P",{});var w=f(ka);da=h(w,"Ahora es cuando entra en juego el hook "),ma=v(w,"CODE",{});var j=f(ma);ga=h(j,"useState"),j.forEach(b),va=h(w,"."),w.forEach(b),fa=P(a),ha=v(a,"P",{});var Rn=f(ha);ba=h(Rn,"Es necesario que el componente seleccionado en currentPage sea variable, se modifique con el tiempo, y cambie cuando se hace click en alguno de los botones. Esto es que cambie el estado de nuestro componente."),Rn.forEach(b),Pa=P(a),xa=v(a,"P",{});var Dn=f(xa);qa=h(Dn,"Este estado lo podemos manejar con el hook "),ya=v(Dn,"CODE",{});var On=f(ya);za=h(On,"useState"),On.forEach(b),Ea=h(Dn," que retorna el arreglo con dos elementos, un valor que llamamos "),wa=v(Dn,"CODE",{});var Tn=f(wa);ja=h(Tn,"activePageIndex"),Tn.forEach(b),$a=h(Dn," y una función que sirve para definir el valor del estado que llamaremos "),Ia=v(Dn,"CODE",{});var Ln=f(Ia);_a=h(Ln,"setActivePageIndex"),Ln.forEach(b),Ca=h(Dn,"."),Dn.forEach(b),Sa=P(a),Na=v(a,"PRE",{class:!0}),f(Na).forEach(b),Aa=P(a),Ra=v(a,"P",{});var Wn=f(Ra);Da=h(Wn,"Además, useState puede recibir un valor inicial que será en este caso el primer índice. Con esto, ya podemos usar el valor de "),Oa=v(Wn,"CODE",{});var Bn=f(Oa);Ta=h(Bn,"activePageIndex"),Bn.forEach(b),La=h(Wn," para definir qué se renderiza en cada momento. Recuerda que cada llamada al componente tiene su propio valor de "),Wa=v(Wn,"CODE",{});var Hn=f(Wa);Ba=h(Hn,"activePageIndex"),Hn.forEach(b),Ha=h(Wn,"."),Wn.forEach(b),Ua=P(a),Ma=v(a,"P",{});var Un=f(Ma);Ga=h(Un,"Utilizaremos el valor de "),Qa=v(Un,"CODE",{});var Mn=f(Qa);Za=h(Mn,"activePageIndex"),Mn.forEach(b),Fa=h(Un," para definir si se muestra o no cada botón. Para eso simplemente escribimos una condicional ternaría indicando que se renderice el botón con cierta condición o se renderice null."),Un.forEach(b),Ja=P(a),Ka=v(a,"PRE",{class:!0}),f(Ka).forEach(b),Va=P(a),Xa=v(a,"P",{});var Gn=f(Xa);Ya=h(Gn,"En el caso del botón atrás, se renderizará sólo si "),an=v(Gn,"CODE",{});var Qn=f(an);nn=h(Qn,"activePageIndex"),Qn.forEach(b),sn=h(Gn,", que es el índice, sea mayor que "),tn=v(Gn,"CODE",{});var Zn=f(tn);en=h(Zn,"0"),Zn.forEach(b),pn=h(Gn,", y en el caso del botón Siguiente, se renderizará sólo si "),on=v(Gn,"CODE",{});var Fn=f(on);cn=h(Fn,"activePageIndex"),Fn.forEach(b),ln=h(Gn," es menor que el total de ítems dentro de las páginas. Aún los botones no hace específicamente nada. Es necesario que el estado pueda cambiar."),Gn.forEach(b),un=P(a),rn=v(a,"P",{});var Jn=f(rn);kn=h(Jn,"Para eso, definiremos dos funciones, una para cuando el botón atrás es presionado y otra para el botón siguiente. Para el botón atrás, simplemente disminuimos el valor del índice. Para eso, utilizamos la forma funcional de la función de actualización, la función "),dn=v(Jn,"CODE",{});var Kn=f(dn);mn=h(Kn,"setActivePageIndex"),Kn.forEach(b),gn=h(Jn,"."),Jn.forEach(b),vn=P(a),fn=v(a,"P",{});var Vn=f(fn);hn=h(Vn,"Este método puede recibir una función que recibe como parámetro el estado actual y modifica el estado en base al valor retornado. En este caso, disminuye el índice en -1. De forma similar al presionar el botón Siguiente, el índice se incrementará en 1."),Vn.forEach(b),bn=P(a),Pn=v(a,"PRE",{class:!0}),f(Pn).forEach(b),xn=P(a),qn=v(a,"P",{});var Xn=f(qn);yn=h(Xn,"Agregamos estos manejadores de eventos a cada botón y con esto ya tenemos una versión simplificada de un componente que permite navegar entre los elementos renderizados utilizando "),zn=v(Xn,"CODE",{});var Yn=f(zn);En=h(Yn,"useState"),Yn.forEach(b),wn=h(Xn," para manejar el estado."),Xn.forEach(b),jn=P(a),$n=v(a,"P",{});var as=f($n);In=v(as,"CODE",{});var ns=f(In);_n=h(ns,"useState"),ns.forEach(b),Cn=h(as," permite manejar el estado de un componente definido como una función. "),Sn=v(as,"CODE",{});var ss=f(Sn);Nn=h(ss,"useState"),ss.forEach(b),An=h(as," retorna un arreglo con dos elementos, el valor del estado y una función para modificar ese estado. Es posible pasar una función como argumento a la función modificadora, lo que permite acceder al estado actual y retornar el nuevo estado"),as.forEach(b),this.h()},h(){x(n,"id","tldr"),x(V,"class","language-jsx"),x(sa,"class","language-jsx"),x(ia,"class","language-jsx"),x(Na,"class","language-jsx"),x(Ka,"class","language-jsx"),x(Pn,"class","language-jsx")},m(a,e){q(a,n,e),y(n,s),q(a,t,e),o(c,a,e),q(a,l,e),o(k,a,e),q(a,z,e),q(a,$,e),y($,I),y($,_),y(_,C),y($,S),y($,N),y(N,A),y($,R),q(a,D,e),q(a,O,e),y(O,T),y(O,L),y(L,W),q(a,B,e),q(a,H,e),y(H,U),q(a,M,e),q(a,G,e),y(G,Q),q(a,Z,e),q(a,F,e),y(F,J),q(a,K,e),q(a,V,e),V.innerHTML='<code class="language-jsx"><span class="token keyword">const</span> <span class="token function-variable function">Wizard</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> children <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wizard<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wizard__content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wizard__buttons<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code>',q(a,X,e),q(a,Y,e),y(Y,aa),q(a,na,e),q(a,sa,e),sa.innerHTML='<code class="language-jsx"><span class="token keyword">const</span> <span class="token function-variable function">Page1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">Pagina 1</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">\n  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">Page2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">Pagina 2</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">\n  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token function-variable function">Page3</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">Pagina 3</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">\n  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Wizard</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Page1</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Page2</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Page3</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Wizard</span></span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code>',q(a,ta,e),q(a,ea,e),y(ea,pa),y(ea,oa),y(oa,ca),y(ea,la),q(a,ua,e),q(a,ia,e),ia.innerHTML='<code class="language-jsx"><span class="token keyword">const</span> <span class="token function-variable function">Wizard</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> children <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">const</span> pages <span class="token operator">=</span> React<span class="token punctuation">.</span>Children<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span>children<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> currentPage <span class="token operator">=</span> pages<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wizard<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wizard__content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>currentPage<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wizard__buttons<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code>',q(a,ra,e),q(a,ka,e),y(ka,da),y(ka,ma),y(ma,ga),y(ka,va),q(a,fa,e),q(a,ha,e),y(ha,ba),q(a,Pa,e),q(a,xa,e),y(xa,qa),y(xa,ya),y(ya,za),y(xa,Ea),y(xa,wa),y(wa,ja),y(xa,$a),y(xa,Ia),y(Ia,_a),y(xa,Ca),q(a,Sa,e),q(a,Na,e),Na.innerHTML='<code class="language-jsx"><span class="token keyword">const</span> <span class="token function-variable function">Wizard</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> children <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>activePageIndex<span class="token punctuation">,</span> setActivePageIndex<span class="token punctuation">]</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> pages <span class="token operator">=</span> React<span class="token punctuation">.</span>Children<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span>children<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> currentPage <span class="token operator">=</span> pages<span class="token punctuation">[</span>activePageIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wizard<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wizard__content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>currentPage<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wizard__buttons<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code>',q(a,Aa,e),q(a,Ra,e),y(Ra,Da),y(Ra,Oa),y(Oa,Ta),y(Ra,La),y(Ra,Wa),y(Wa,Ba),y(Ra,Ha),q(a,Ua,e),q(a,Ma,e),y(Ma,Ga),y(Ma,Qa),y(Qa,Za),y(Ma,Fa),q(a,Ja,e),q(a,Ka,e),Ka.innerHTML='<code class="language-jsx"><span class="token keyword">const</span> <span class="token function-variable function">Wizard</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> children <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>activePageIndex<span class="token punctuation">,</span> setActivePageIndex<span class="token punctuation">]</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> pages <span class="token operator">=</span> React<span class="token punctuation">.</span>Children<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span>children<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> currentPage <span class="token operator">=</span> pages<span class="token punctuation">[</span>activePageIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">const</span> <span class="token function-variable function">ButtonPrev</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>\n    activePageIndex <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token punctuation">(</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wizard__buttons-left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n        Atras\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n    <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">ButtonNext</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>\n    activePageIndex <span class="token operator">&lt;</span> pages<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token punctuation">(</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wizard__buttons-right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n        Siguiente\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n    <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wizard<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wizard__content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>currentPage<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wizard__buttons<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ButtonPrev</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ButtonNext</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code>',q(a,Va,e),q(a,Xa,e),y(Xa,Ya),y(Xa,an),y(an,nn),y(Xa,sn),y(Xa,tn),y(tn,en),y(Xa,pn),y(Xa,on),y(on,cn),y(Xa,ln),q(a,un,e),q(a,rn,e),y(rn,kn),y(rn,dn),y(dn,mn),y(rn,gn),q(a,vn,e),q(a,fn,e),y(fn,hn),q(a,bn,e),q(a,Pn,e),Pn.innerHTML='<code class="language-jsx"><span class="token keyword">const</span> <span class="token function-variable function">Wizard</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> children <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>activePageIndex<span class="token punctuation">,</span> setActivePageIndex<span class="token punctuation">]</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> pages <span class="token operator">=</span> React<span class="token punctuation">.</span>Children<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span>children<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> currentPage <span class="token operator">=</span> pages<span class="token punctuation">[</span>activePageIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">const</span> <span class="token function-variable function">goNextPage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>\n    <span class="token function">setActivePageIndex</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span> <span class="token operator">=></span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">const</span> <span class="token function-variable function">goPrevPage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>\n    <span class="token function">setActivePageIndex</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span> <span class="token operator">=></span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">const</span> <span class="token function-variable function">ButtonPrev</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>\n    activePageIndex <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token punctuation">(</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span>\n        <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span>\n        <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>goPrevPage<span class="token punctuation">&#125;</span></span>\n        <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wizard__buttons-left<span class="token punctuation">"</span></span>\n      <span class="token punctuation">></span></span><span class="token plain-text">\n        Atras\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n    <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">ButtonNext</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>\n    activePageIndex <span class="token operator">&lt;</span> pages<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token punctuation">(</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span>\n        <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span>\n        <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>goNextPage<span class="token punctuation">&#125;</span></span>\n        <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wizard__buttons-right<span class="token punctuation">"</span></span>\n      <span class="token punctuation">></span></span><span class="token plain-text">\n        Siguiente\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n    <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wizard<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wizard__content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>currentPage<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wizard__buttons<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ButtonPrev</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ButtonNext</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code>',q(a,xn,e),q(a,qn,e),y(qn,yn),y(qn,zn),y(zn,En),y(qn,wn),q(a,jn,e),q(a,$n,e),y($n,In),y(In,_n),y($n,Cn),y($n,Sn),y(Sn,Nn),y($n,An),Rn=!0},p(a,n){const s={};2&n&&(s.$$scope={dirty:n,ctx:a}),c.$set(s)},i(a){Rn||(u(c.$$.fragment,a),u(k.$$.fragment,a),Rn=!0)},o(a){i(c.$$.fragment,a),i(k.$$.fragment,a),Rn=!1},d(a){a&&b(n),a&&b(t),r(c,a),a&&b(l),r(k,a),a&&b(z),a&&b($),a&&b(D),a&&b(O),a&&b(B),a&&b(H),a&&b(M),a&&b(G),a&&b(Z),a&&b(F),a&&b(K),a&&b(V),a&&b(X),a&&b(Y),a&&b(na),a&&b(sa),a&&b(ta),a&&b(ea),a&&b(ua),a&&b(ia),a&&b(ra),a&&b(ka),a&&b(fa),a&&b(ha),a&&b(Pa),a&&b(xa),a&&b(Sa),a&&b(Na),a&&b(Aa),a&&b(Ra),a&&b(Ua),a&&b(Ma),a&&b(Ja),a&&b(Ka),a&&b(Va),a&&b(Xa),a&&b(un),a&&b(rn),a&&b(vn),a&&b(fn),a&&b(bn),a&&b(Pn),a&&b(xn),a&&b(qn),a&&b(jn),a&&b($n)}}}function I(a){let n,s;const k=[a[0],_];let d={$$slots:{default:[$]},$$scope:{ctx:a}};for(let e=0;e<k.length;e+=1)d=t(d,k[e]);return n=new z({props:d}),{c(){e(n.$$.fragment)},l(a){p(n.$$.fragment,a)},m(a,t){o(n,a,t),s=!0},p(a,[s]){const t=1&s?c(k,[1&s&&l(a[0]),0&s&&l(_)]):{};2&s&&(t.$$scope={dirty:s,ctx:a}),n.$set(t)},i(a){s||(u(n.$$.fragment,a),s=!0)},o(a){i(n.$$.fragment,a),s=!1},d(a){r(n,a)}}}const _={date:"2021-07-11T03:13:59.000Z",banner:"https://res.cloudinary.com/matiasfha/image/upload/v1597115954/andreas-gucklhorn-Ilpf2eUPpUE-unsplash_n8npgz.jpg",keywords:["useState","hooks","hook","React","Wizard","componentes","lesson","tutorial"],tag:"Post",title:"Crear un componente Wizard utilizando useState React hook",description:"Como utilizar useState React hook para crear un sencillo componente Wizard o multi-step",bannerCredit:'<span>Photo by <a href="https://unsplash.com/@draufsicht?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Andreas Gücklhorn</a> on <a href="https://unsplash.com/collections/9718937/solar?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Unsplash</a></span>',favorite:!0};function C(a,n,s){return a.$$set=a=>{s(0,n=t(t({},n),k(a)))},[n=k(n)]}class S extends a{constructor(a){super(),n(this,a,C,I,s,{})}}export{S as default,_ as metadata};
