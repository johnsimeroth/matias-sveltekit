---
date: 2022-07-25T00:37:26Z
banner: https://cdn.sanity.io/images/cyypawp1/production/c1dc566e4e0a878e0f6c5ef13747567a754b429d-1280x710.png
keywords: 
- Array sort
- ordernar arreglo
- ordernar array
- Javascript order arreglo
- Javascript Array sort
title: "Â¿CÃ³mo ordernar un Arreglo de arreglos con Javascript?"
description: "Un arreglo puede contener cualquier tipo de elemento, incluso otro arreglo. Â¿CÃ³mo ordenas un arreglo de arreglos basado en algÃºn valor del arreglo interno?"
bannerCredit: undefined
tag: Javascript
---

El mÃ©todo `sort()` te permite ordenar los elementos de cualquier arreglo, retornando el arreglo ordenado, pero tambiÃ©n cambiando la posiciÃ³n de los elementos del arreglo original.



En su forma mÃ¡s bÃ¡sica, `sort` intentarÃ¡ ordenar los elementos basado en su contenido, es decir, si el arreglo contiene strings, este serÃ¡ ordenado de forma alfabÃ©tica. 

El mÃ©todo `sort` "transforma" (cast) los elementos del arreglo a `strings` y los compara entre si para determinar el orden.

```js

let numbers = [0, 1 , 2, 3, 10, 20, 30 ];
numbers.sort();
console.log(numbers);
// [0,1, 10, 2, 20, 3, 30]

```

En este caso el mÃ©todo `sort` ordena erradamente el nÃºmero `10` antes que el `2` por que el string `"10"` viene antes que el string `"2"` al comparar strings.



Pero el mÃ©todo `sort` tambiÃ©n puede recibir un argumento que te permite definir cÃ³mo se debe realizar el ordenamiento.mento que define la forma en que se harÃ¡ la comparaciÃ³n.



> Encuentra mÃ¡s informaciÃ³n sobre el mÃ©todo `sort` [en la documentaciÃ³n en MDN](https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/sort)



Es este argumento el que te permitirÃ¡ ordenar un arreglo bi-dimensional como el siguiente:

```js

const data = [
  ['Matias', 5, "07/24/2022"],
  ['Nicole', 7, "07/14/2022"],
  ['Inti', 10, "07/20/2022"],
  ['MÃ­a', 3, "07/22/2022"],
 ]
```

Un arreglo de arreglos o arreglo bi-dimensional en donde cada sub-arreglo contiene un string, un nÃºmero y una fecha en formato string.



Â¿CÃ³mo puedes ordenar este arreglo en base a la fecha del 3 elemento del sub-arreglo?



En realidad es sÃ³lo utilizar el mÃ©todo `sort` junto a su argumento: "la funciÃ³n comparadora".

En el caso del arreglo `data`, al llamar `sort` directamente, este serÃ¡ ordenado por el primer elemento del arreglo interno.



```js

console.log(data.sort())
/*
[
  ['Inti', 10, "07/20/2022"],
  ['Matias', 5, "07/24/2022"],
  ['MÃ­a', 3, "07/22/2022"],
  ['Nicole', 7, "07/14/2022"],
]
*/
```

Pero, el argumento que recibe `sort` te permite definir que quieres comparar y asÃ­ poder ordenar por este atributo.



```js


data.sort((a, b) => {

   // realizar alguna comparaciÃ³n

   // retornar 0 si ambos valores son iguales

   // retornar -1 si a va primero que b

   // retornar 1 si b va primero que a

})

```

Entonces, en este caso de uso, lo que se busca es ordenar el arreglo `data` basado en el tercer elemento del sub-arreglo, es decir el indice `2`, por lo tanto la funciÃ³n de comparaciÃ³n usarÃ¡ ese indice para realizar la comparaciÃ³n.



```js

data.sort((a, b) => {
  const dateA = new Date(a[2])
  const dateB = new Date(b[2])
  
  return dateA - dateB
})

/*[
  ['Nicole', 7, "07/14/2022"],
  ['MÃ­a', 3, "07/22/2022"],
  ['Inti', 10, "07/20/2022"],
  ['Matias', 5, "07/24/2022"],
]
*/
```

Y eso es :D, para ordenar un arreglo bi-dimensional debes usar el indice del sub-arreglo para la funciÃ³n de comparaciÃ³n.



> Como tip adicional, para comparar fechas solo debes sustraer ambas fechas ğŸ”¥